import heapq
import sys

input = sys.stdin.readline

n,m,k,x = map(int,input().split())
graph=[[] for _ in range(n+1)]
for i in range(m):
    a,b=map(int,input().split())
    graph[a].append(b)

INF=1e9
visited=[False]*(n+1)
distance=[INF]*(n+1)

def dijkstra(start):
    visited[start] =True
    distance[start]=0
    q=[]
    heapq.heappush(q,(distance[start],start))
    while q :
        dist, now = heapq.heappop(q)
        visited[now] = True
        if distance[now] < dist :
            continue
        for i in graph[now]:
            if visited[i] == False :
                cost = 1 + dist
                if cost < distance[i] :
                    distance[i]=cost
                    q.append((distance[i],i))
    return distance
result=[]
for i in range(1,len(dijkstra(x))):
    if dijkstra(x)[i] == k :
        result.append(i)
result.sort()
if len(result) == 0 :
    print(-1)
else :
    for i in result :
        print(i)
